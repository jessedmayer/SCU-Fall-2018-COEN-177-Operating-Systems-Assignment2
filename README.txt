The minix scheduling algorithm has 16 scheduling queues for its processes, with queue 0 having the highest priority and queue 15 having the lowest priority. The expression rdy_head[q] gives the first ready process for queue q, and if queue q doesn't have a ready process then we proceed to the next q by incrementing. To add randomization to the scheduling process I left queues 0 to 5 alone amd used the original incrementing scheduling algorithm for them since they are essential to the boot-up process. Then for queues 6 to 15 I made it so there is a 5%
chance of randomizing the paramater q which is the current queue we are checking to see if it has any ready processes. This randomization is done by assigning q a random queue from 6 to 15 instead of simply incrementing q like the original scheduling algorithm did. The observable difference of this randomized scheduling scheme is that it takes much longer to reboot minix, but still runs and doesn't crash. This shows that the randomization is working and slowing down the reboot process but that it doesn't break the reboot process.Therefore, this new scheduling algorithm properly utilizes randomization.
~                                                      
